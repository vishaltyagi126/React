{"version":3,"sources":["TodoCreator.js","TodoRow.js","TodoBanner.js","VisibilityControl.js","App.js","reportWebVitals.js","index.js"],"names":["TodoCreator","props","updateNewItemValue","event","setState","newItem","target","value","createNewTodo","callback","state","render","className","onChange","onClick","Component","TodoRow","item","action","type","checked","done","TodoBanner","name","tasks","filter","t","length","VisibilityControl","isChecked","e","desc","App","changeState","userName","task","todoItems","find","toggeltodo","todo","map","todoTableRows","doneValues","showCompleted","this","To","Do","List","itmes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7367d2a8.chunk.js","sourcesContent":["import React, { Component  } from \"react\";\r\n\r\nexport  class TodoCreator extends Component\r\n{\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {  newItem : \" \" }\r\n    }\r\n\r\n\r\n    updateNewItemValue =(event) =>\r\n    {\r\n        this.setState({newItem : event.target.value})\r\n    }\r\n\r\n    createNewTodo =() =>\r\n    {\r\n        //passing data from child to parent Component \r\n        this.props.callback(this.state.newItem);\r\n\r\n\r\n        this.setState({ newItem : \" \"})\r\n      \r\n    }\r\n\r\n    render =() =>\r\n    <div className=\"my-1 text-center\">\r\n         <input \r\n                    className=\"form-control\" \r\n                    value={this.state.newItem} \r\n                    onChange={this.updateNewItemValue} />\r\n                    \r\n                    <button className=\"btn btn-warning my-1  \" onClick={this.createNewTodo} > \r\n                    Add Tasks  \r\n                    </button>\r\n    </div>\r\n\r\n\r\n}","import React, { Component } from 'react';\r\n\r\nexport class TodoRow extends Component\r\n{\r\n    render =() => \r\n\r\n    <tr>\r\n        <td> {this.props.item.action} </td>\r\n        <td> \r\n            <input type=\"checkbox\" checked={ this.props.item.done }  \r\n                    onChange={ () => this.props.callback(this.props.item)   } \r\n            /> \r\n        </td>\r\n    </tr>\r\n\r\n}","import React, { Component } from 'react';\r\n\r\nexport  class TodoBanner extends Component\r\n{\r\n    render =() => \r\n\r\n    <h4 className=\"bg-primary text-center text-white p-3\">\r\n            { this.props.name }, you have \r\n            ({ this.props.tasks.filter(t=> !t.done ).length }) tasks to complete\r\n    </h4>\r\n}","import React, {Component} from 'react';\r\n\r\nexport class VisibilityControl extends Component\r\n{\r\n    render = () =>\r\n        <div className=\"form-check\">\r\n           \r\n          \r\n            <input className=\"form-check-input\" \r\n                   type= \"checkbox\"\r\n                   checked={ this.props.isChecked}\r\n                   onChange = { (e) => this.props.callback(e.target.checked) } />\r\n\r\n            \r\n           <label className=\"form-check-label\">\r\n                        Show { this.props.desc }\r\n            </label>\r\n\r\n        </div>\r\n}","import React , {Component } from 'react';\nimport {TodoCreator} from './TodoCreator';\nimport {TodoRow} from './TodoRow';\nimport {TodoBanner} from './TodoBanner';\nimport {  VisibilityControl } from './VisibilityControl';\n\n\nclass App extends Component \n  {\n      constructor(props)\n      {\n        super(props);\n        this.state ={\n          userName : \"Vishal\",\n          todoItems : [{action:'Shopping', done: false}, {action:'Workout', done: false}, \n                        {action:'Study', done:false}],\n          showCompleted : true\n        }\n        \n      }\n\n\n      render()\n      {\n        return (\n                <div>\n                     \n                      <TodoBanner name={ this.state.userName } To Do List  \n                     tasks={this.state.todoItems  } itmes   /> \n                <div className=\"container-fluid\">\n                    <TodoCreator callback={this.createNewTodo} />\n                  <table className=\"table table-striped table-bordered\">\n                        <thead>\n                          <tr>\n                            <td>Description</td>\n                            <td>Status</td>\n                          </tr>\n                        </thead>\n                        <tbody>  {this.todoTableRows(false) }    </tbody>\n                  </table>\n\n                  <div className=\"bg-secondary text-white text-center p-2\">\n                    <VisibilityControl   desc =\" Completed Tasks \"\n                                         isChecked = { this.state.showCompleted}\n                                         callback = { (checked) => \n                                          this.setState({ showCompleted : checked })}\n                    />\n\n                  </div>\n                                            \n                  {\n                    this.state.showCompleted && \n                    <table className=\"table table-striped table-bordered\">\n                      <thead>\n                        <tr>\n                          <td>Description</td>\n                          <td>Done</td>\n                        </tr>\n                      </thead>\n                      <tbody>  {this.todoTableRows(true) }    </tbody>\n                    </table>\n                  }\n                </div>\n                </div>\n            \n              );\n      }\n\n      changeState = () => {\n          this.setState({userName: this.state.userName === 'Vishal' ? 'Rahul' : 'Vishal' })\n      }\n\n      // Recieve Task from Child Component \n      createNewTodo =( task ) =>\n      {\n        if(!this.state.todoItems.find(item => item.action === task))\n        {\n          this.setState({\n            todoItems: [...this.state.todoItems, {action: task, done : false}]\n          })\n        }\n      }\n\n      updateNewItemValue =(event) =>\n      {\n          this.setState({newItem : event.target.value})\n      }\n      \n      toggeltodo = (todo) => \n             this.setState( {todoItems: this.state.todoItems.map(item=>\n                      item.action === todo.action ? { ...item, done: !item.done  }   : item) });\n                        \n        todoTableRows = (doneValues ) => \n                  this.state.todoItems\n                  .filter( t=> t.done === doneValues)\n                  .map(item => <TodoRow key={item.action} \n                                        item={item} \n                                        callback={this.toggeltodo}  /> );    \n  }\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}